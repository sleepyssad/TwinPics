<UserControl
    x:Class="TwinPics.Views.Controls.Button"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:TwinPics.Views.Controls"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core" 
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="using:Microsoft.Toolkit.Uwp.UI"
    mc:Ignorable="d">


    <Grid x:Name="Form"
          Loaded="FormLoaded"
          SizeChanged="FormSizeChanged"
          PointerPressed="Pressed"
          PointerReleased="Released"
          PointerEntered="PointerEntered"
          PointerExited="PointerExited"
          ui:FrameworkElementExtensions.Cursor="Hand"
          CornerRadius="{x:Bind CornerRadius, Mode=OneWay}"
          Background="{x:Bind Background, Mode=OneWay}"
          BorderBrush="{x:Bind BorderBrush, Mode=OneWay}"
          BorderThickness="{x:Bind BorderThickness, Mode=OneWay}">
        <Grid.Clip>
            <RectangleGeometry Rect="0,0,0,0"/>
        </Grid.Clip>

        <Canvas>
            <Ellipse x:Name="EllipseElement"
                 Opacity="0"
                 Fill="{ThemeResource RippleEffectColor}"
                 Loaded="OnEllipseLoaded"
                 VerticalAlignment="Top" 
                 HorizontalAlignment="Left"
                 IsHitTestVisible="False"
                 RenderTransformOrigin=".5,.5">
                <Ellipse.RenderTransform>
                    <ScaleTransform x:Name="EllipseElementScale"
                                ScaleX="1"
                                ScaleY="1"/>
                </Ellipse.RenderTransform>
            </Ellipse>
        </Canvas>


        <StackPanel Orientation="Horizontal" 
                    VerticalAlignment="Center" 
                    HorizontalAlignment="Center"
                    Margin="{x:Bind Padding, Mode=OneWay}">
            <TextBlock x:Name="TextElement"
                       VerticalAlignment="Center"
                       Visibility="Collapsed"
                       Margin="4,0,4,0"
                       Text="{x:Bind Text, Mode=OneWay}" 
                       Foreground="{x:Bind TextColor, Mode=OneWay}"
                       FontSize="{x:Bind FontSize, Mode=OneWay}"/>
            <Grid>
                <BitmapIcon x:Name="ActiveIconElement"
                            Margin="4,0,4,0"
                            Visibility="Collapsed"
                            VerticalAlignment="Center"
                            UriSource="{x:Bind Icon, Mode=OneWay}"
                            Width="{x:Bind IconSize, Mode=OneWay}"
                            Height="{x:Bind IconSize, Mode=OneWay}"
                            Foreground="{x:Bind HoveredIconColor, Mode=OneWay}"/>
                <BitmapIcon x:Name="IconElement"
                            Margin="4,0,4,0"
                            Visibility="Collapsed"
                            VerticalAlignment="Center"
                            UriSource="{x:Bind Icon, Mode=OneWay}"
                            Width="{x:Bind IconSize, Mode=OneWay}"
                            Height="{x:Bind IconSize, Mode=OneWay}"
                            Foreground="{x:Bind IconColor, Mode=OneWay}"/>
            </Grid>
        </StackPanel>

        <interactivity:Interaction.Behaviors>
            <core:DataTriggerBehavior Binding="{x:Bind Text, Mode=OneWay}"
                                      ComparisonCondition="Equal"
                                      Value="{x:Null}">
                <core:ChangePropertyAction TargetObject="{Binding ElementName=TextElement}" 
                                           PropertyName="Visibility"
                                           Value="Collapsed" />
            </core:DataTriggerBehavior>
            <core:DataTriggerBehavior Binding="{x:Bind Text, Mode=OneWay}"
                                      ComparisonCondition="NotEqual"
                                      Value="{x:Null}">
                <core:ChangePropertyAction TargetObject="{Binding ElementName=TextElement}" 
                                           PropertyName="Visibility"
                                           Value="Visible" />
            </core:DataTriggerBehavior>
            <core:DataTriggerBehavior Binding="{x:Bind Icon, Mode=OneWay}"
                                      ComparisonCondition="Equal"
                                      Value="{x:Null}">
                <core:ChangePropertyAction TargetObject="{Binding ElementName=IconElement}"
                                           PropertyName="Visibility"
                                           Value="Collapsed" />
                <core:ChangePropertyAction TargetObject="{Binding ElementName=ActiveIconElement}" 
                                           PropertyName="Visibility"
                                           Value="Collapsed" />
            </core:DataTriggerBehavior>
            <core:DataTriggerBehavior Binding="{x:Bind Icon, Mode=OneWay}"
                                      ComparisonCondition="NotEqual"
                                      Value="{x:Null}">
                <core:ChangePropertyAction TargetObject="{Binding ElementName=IconElement}" 
                                           PropertyName="Visibility"
                                           Value="Visible" />
                <core:ChangePropertyAction TargetObject="{Binding ElementName=ActiveIconElement}" 
                                           PropertyName="Visibility"
                                           Value="Visible" />
            </core:DataTriggerBehavior>
            <core:DataTriggerBehavior Binding="{x:Bind IsEnabled, Mode=OneWay}"
                                      Value="False">
                <core:GoToStateAction StateName="DidabledState"/>
                <core:ChangePropertyAction TargetObject="{Binding ElementName=Form}" 
                                           PropertyName="IsHitTestVisible"
                                           Value="false" />
            </core:DataTriggerBehavior>
            <core:DataTriggerBehavior Binding="{x:Bind IsEnabled, Mode=OneWay}"
                                      Value="True">
                <core:GoToStateAction StateName="EnabledState"/>
                <core:ChangePropertyAction TargetObject="{Binding ElementName=Form}"
                                           PropertyName="IsHitTestVisible"
                                           Value="true" />
            </core:DataTriggerBehavior>
        </interactivity:Interaction.Behaviors>

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="DidabledState">
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="Form"
                            Storyboard.TargetProperty="Opacity"
                            Duration="0:0:0.080"
                            To=".5">
                        </DoubleAnimation>
                    </Storyboard>
                </VisualState>
                <VisualState x:Name="EnabledState">
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="Form"
                            Storyboard.TargetProperty="Opacity"
                            Duration="0:0:0.080"
                            To="1">
                        </DoubleAnimation>
                    </Storyboard>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>


    <UserControl.Resources>
        <Storyboard x:Name="DefaultOpacityTappedState">
            <DoubleAnimation Storyboard.TargetName="EllipseElement"
                             EnableDependentAnimation="True"
                             Storyboard.TargetProperty="Opacity"
                             Duration="0:0:0.4"
                           
                             To="0">
                <DoubleAnimation.EasingFunction>
                    <PowerEase EasingMode="EaseOut" Power="3"/>
                </DoubleAnimation.EasingFunction>
            </DoubleAnimation>
        </Storyboard>
        <Storyboard x:Name="TappedState">
            <DoubleAnimation Storyboard.TargetName="EllipseElementScale"
                             EnableDependentAnimation="True"
                             Storyboard.TargetProperty="ScaleX"
                             Duration="0:0:0.6"
                             From="0"
                             To="15">
                <DoubleAnimation.EasingFunction>
                    <PowerEase EasingMode="EaseOut" Power="3"/>
                </DoubleAnimation.EasingFunction>
            </DoubleAnimation>
            <DoubleAnimation Storyboard.TargetName="EllipseElementScale"
                             EnableDependentAnimation="True"
                             Storyboard.TargetProperty="ScaleY"
                             Duration="0:0:0.6"
                             From="0"
                             To="15">
                <DoubleAnimation.EasingFunction>
                    <PowerEase EasingMode="EaseOut" Power="3"/>
                </DoubleAnimation.EasingFunction>
            </DoubleAnimation>
            <DoubleAnimation Storyboard.TargetName="EllipseElement"
                             EnableDependentAnimation="True"
                             Storyboard.TargetProperty="Opacity"
                             Duration="0:0:0.3"
                             From="1"
                             To=".5">
            </DoubleAnimation>
        </Storyboard>
        <Storyboard x:Name="DefaultState">
            <ColorAnimation x:Name="DefaultStateBackground"
                            Storyboard.TargetName="Form"
                            Storyboard.TargetProperty="(Grid.Background).Color"
                            EnableDependentAnimation="True"
                            Duration="0:0:0.080"
                            To="{x:Bind Background, Mode=OneWay, Converter={StaticResource SolidColorBrushToColor}}"/>
            <ColorAnimation x:Name="DefaultStateTextColor"
                            Storyboard.TargetName="TextElement"
                            Storyboard.TargetProperty="(TextBlock.Foreground).Color"
                            EnableDependentAnimation="True"
                            Duration="0:0:0.080"
                            To="{x:Bind TextColor, Mode=OneWay, Converter={StaticResource SolidColorBrushToColor}}"/>
            <ColorAnimation x:Name="DefaultStateBorderBrush"
                            Storyboard.TargetName="Form"
                            Storyboard.TargetProperty="(Grid.BorderBrush).(SolidColorBrush.Color)"
                            EnableDependentAnimation="True"
                            Duration="0:0:0.080"
                            To="{x:Bind BorderBrush, Mode=OneWay, Converter={StaticResource SolidColorBrushToColor}}"/>
            <DoubleAnimation Storyboard.TargetName="IconElement"
                             Storyboard.TargetProperty="Opacity"
                             EnableDependentAnimation="True"
                             Duration="0:0:0.080"
                             To="1"/>
        </Storyboard>

        <Storyboard x:Name="HoverState">
            <ColorAnimation x:Name="HoverStateBackground"
                            Storyboard.TargetName="Form"
                            Storyboard.TargetProperty="(Grid.Background).Color"
                            EnableDependentAnimation="True"
                            Duration="0:0:0.080"
                            To="{x:Bind HoveredBackground, Mode=OneWay, Converter={StaticResource SolidColorBrushToColor}}"/>
            <ColorAnimation x:Name="HoverStateTextColor"
                            Storyboard.TargetName="TextElement"
                            Storyboard.TargetProperty="(TextBlock.Foreground).Color"
                            EnableDependentAnimation="True"
                            Duration="0:0:0.080"
                            To="{x:Bind HoveredTextColor, Mode=OneWay, Converter={StaticResource SolidColorBrushToColor}}"/>
            <ColorAnimation x:Name="HoverStateBorderBrush"
                            Storyboard.TargetName="Form"
                            Storyboard.TargetProperty="(Grid.BorderBrush).(SolidColorBrush.Color)"
                            EnableDependentAnimation="True"
                            Duration="0:0:0.080"
                            To="{x:Bind HoveredBorderBrush, Mode=OneWay, Converter={StaticResource SolidColorBrushToColor}}"/>
            <DoubleAnimation Storyboard.TargetName="IconElement"
                             Storyboard.TargetProperty="Opacity"
                             EnableDependentAnimation="True"
                             Duration="0:0:0.080"
                             To="0"/>
        </Storyboard>
    </UserControl.Resources>
    
</UserControl>
